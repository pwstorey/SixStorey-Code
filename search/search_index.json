{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#ideas","title":"Ideas","text":"<ul> <li>VS Code keyboard shortcuts </li> <li>Streamlit Applications </li> <li>Google Sheets as a database </li> <li>Xero API </li> <li>Docker, Kubernetes - Container management for Home Labs</li> <li>FastAPI </li> <li>FastHTML </li> <li>React </li> </ul>"},{"location":"Git/more_git_notes/","title":"What is Git","text":"<p>Git is a distributed version control system (VCS) allowing users to track changes and rewind updates. </p>"},{"location":"Git/more_git_notes/#how-to-configure-git","title":"How to configure git:","text":"<p>To set-up git on your local computer the following commands are useful: </p> <pre><code>git config --list \ngit config --global user.email \"&lt;Email Address&gt;\"\ngit config --global user.name \"&lt;Name&gt;\" \n</code></pre>"},{"location":"Git/more_git_notes/#how-to-start-a-new-local-project","title":"How to start a new local project","text":"<p>Within the project folder enter the command: </p> <pre><code>git init &lt;name&gt;\n</code></pre> <p>This creates a .git folder which contains all the version history data. </p> <p>New files within the project folder will not automatically be tracked and commited to the repository. You need to use the following command </p> <pre><code>git add &lt;filename&gt;\ngit add . \n</code></pre>"},{"location":"Git/more_git_notes/#quick-summary-of-the-git-workflow","title":"Quick summary of the git workflow","text":"<p>Files within a git repository typically work in three stages:  1. New files exist in what's known as the \"working directory\".  2. Once those files have been added to the repository they enter what is known as the \"staging area\". This prepares git to know which files you would like to commit.  3. Once you are happy with all the changes that are staged in the staging area, you can then commit the changes to the git repository. This is done with the command:</p> <pre><code>git commit -m \"Message describing changes\" \n</code></pre> <p>If you then check git status you will see that there are no changes noted, which means that the working directory is inline with the latest commit in the git repository. </p>"},{"location":"Git/more_git_notes/#how-to-see-the-changes-in-files","title":"How to see the changes in files","text":"<p>To see the changes in a file you can use the command: </p> <pre><code>git diff\ngit log\n</code></pre>"},{"location":"Git/more_git_notes/#how-to-restore","title":"How to restore","text":"<pre><code>git restore &lt;filename&gt;\ngit reset &lt;commit ID&gt;\n</code></pre>"},{"location":"Git/working_with_git/","title":"How to Work with Git Version Control","text":""},{"location":"Git/working_with_git/#working-with-git-locally","title":"Working with git locally","text":"<p>To initialise a git repository run this command in the project folder: <pre><code>git init\n</code></pre></p> <p>To set the user info:  <pre><code>git config --global user.name '&lt;name&gt;'\ngit config --global user.email '&lt;email&gt;' \n</code></pre></p> <p>To add a specific file to the staging area:  <pre><code>git add &lt;filename&gt; \n</code></pre></p> <p>To add all files to the staging area, or specific file types:  <pre><code>git add . \ngit add *.html\n</code></pre></p> <p>To check the status of the repo, to see changes and commits etc:  <pre><code>git status\n</code></pre></p> <p>To commit changes with a message describing the changes:  <pre><code>git commit -m &lt;message&gt;\n</code></pre></p> <p>We use a <code>.gitignore</code> file to specify all the files and file types which should not be included in the repo. </p> <p>This can be generaged here: https://gitignore.io/</p>"},{"location":"Git/working_with_git/#working-with-git-remotely-via-githubcom","title":"Working with git remotely via GitHub.com","text":"<p>Once a local repo is set-up we want to link this to a repository on github. First, we should set-up a new repository on Github and then use the following commands to link our local repo to that online repository. </p> <pre><code>git remote add origin https://github.com/pwstorey/&lt;name_of_repo&gt;.git \ngit push -u origin master\n</code></pre> <p>To pull all the latest changes from a github repository down to update a local repo:  <pre><code>git pull \n</code></pre></p> <p>We can also clone the contents of a repo on github with the following command:  <pre><code>git clone https://github.com/pwstorey/&lt;name_of_repo&gt;.git \n</code></pre></p>"},{"location":"Kubernetes/k3s/","title":"Installing k3s Kubernetes","text":""},{"location":"Material%20for%20MkDocs/mkdocs_set-up/","title":"The Workflow for updating this site","text":""},{"location":"Material%20for%20MkDocs/mkdocs_set-up/#updating-and-building-mkdocs-then-pushing-to-github","title":"Updating and building MkDocs then pushing to GitHub","text":"<p>Make sure that the virtual environment has been activated with: </p> <pre><code>source venv/bin/activate  \n</code></pre> <p>Update the markdown files and then run the following command in order the run a live server to preview changes. </p> <pre><code>mkdocs serve \n</code></pre> <p>This will automatically rebuild the site when changes are made. To manually build the site use: </p> <pre><code>mkdocs build  \n</code></pre> <p>Then to push the changes to go live via GitHub Pages we use: </p> <pre><code>git add . \ngit commit -m \"message\" \ngit push orgin main \n</code></pre> <p>This can take a minute or two to update on the live website. </p>"},{"location":"Python/python_on_mac/","title":"Working with Python on MacOS","text":""},{"location":"Python/python_on_mac/#how-to-install-python-on-macos","title":"How to install python on MacOS","text":"<p>To install python on MacOS we use an environment manager called PyEnv. This is installed as follows: <pre><code>brew update \nbrew install pyenv \n</code></pre></p> <p>We use this to install versions on python:  <pre><code>pyenv install &lt;version&gt;   [for example 3.10.7]\npyenv global &lt;version&gt;\n</code></pre></p> <p>This sets the version for the global python version which overwrites the default on MacOS which would otherwise be:  <pre><code>python --version   [which would return --&gt; 2.7]\npython3 --version   [which would return --&gt; 3.8]\n</code></pre></p>"},{"location":"Python/virtual_environments/","title":"Virtual Environments","text":"<p>To make a new virtual environment:  <pre><code>python -m venv &lt;folder name&gt;   &lt;-- usually \"venv\"\n</code></pre></p> <p>To activate the virtual environment:  <pre><code>source venv/bin/activate\n</code></pre></p> <p>To deactivate: <pre><code>deactivate\n</code></pre></p> <p>To create a requirements.txt file of all installed packages:  <pre><code>pip freeze &gt; requirements.txt\n</code></pre></p> <p>To batch install all the packages from a requirements.txt file:  <pre><code>pip install -r requirements.txt \n</code></pre></p>"},{"location":"Raspberry%20Pi/booting_from_nvme/","title":"How to set-up and boot a Raspberry Pi from an NVMe SSD","text":""},{"location":"Raspberry%20Pi/booting_from_nvme/#firmware","title":"Firmware","text":"<p>Make sure your Raspberry Pi 5 firmware is up to date with the 2023-12-06 or later version. A software update on the RPi OS should do this for you, but you can force it by running: </p> <pre><code>sudo rpi-eeprom-update \n</code></pre> <p>in the Terminal. This will also tell you which firmware is running. </p>"},{"location":"Raspberry%20Pi/booting_from_nvme/#power","title":"Power","text":"<p>The NVMe hat uses around 5W of power but worth monitoring power usage SSD so that you don't have any isues.  </p>"},{"location":"Raspberry%20Pi/booting_from_nvme/#set-up","title":"Set-up","text":"<p>List Block Devices - ususally wont show the NVMe device without it being configured.  <pre><code>lsblk\n</code></pre> We need to edit the configuration files to access our NVMe SSD.  <pre><code>sudo nano /boot/config.txt\n</code></pre></p> <p>At the very end after [all] we add the lines: </p> <p><pre><code>[all]\ndtparam=nvme\ndtparam=pciex1_gen=2 \n</code></pre> Gen 2 is supported but Gen 3 seems to be stable and  Ctrl-X to save and exit, sudo reboot. Trying lsblk again and we can check to see if we can see the NVMe drive. </p>"},{"location":"Raspberry%20Pi/booting_from_nvme/#pcie-3-mode","title":"PCIe 3 Mode","text":"<p>To enable experimental and not-officially-supported PCIe 3 mode, add the follow line to the [all] section at the end of your Raspberry Pi /boot/config.txt file:</p> <pre><code>[all]\ndtparam=pciex1_gen=3\n</code></pre>"},{"location":"Raspberry%20Pi/booting_from_nvme/#speed-testing","title":"Speed Testing","text":"<p>We can test the speed of the drive using the name of the ssd drive from the lsblk command: </p> <pre><code>sudo hdparm -t --direct /dev/nvme0n1\n</code></pre>"},{"location":"Raspberry%20Pi/booting_from_nvme/#how-to-boot-from-the-nvme-ssd","title":"How to boot from the NVMe SSD","text":"<p>First of all fully update the pi and reboot: </p> <pre><code>sudo apt update \nsudo apt upgrade \nsudo reboot \n</code></pre> <p>We can edit the EEPROM configuration files with: </p> <pre><code>sudo rpi-eeprom-config --edit\n</code></pre> <p>Change the BOOT_ORDER line to the following: <pre><code>BOOT_ORDER=0xf416\n</code></pre></p> <p>The 6 represents the NVMe SSD drive. Then add the following line if using a non-HAT+ adapter: <pre><code>PCIE_PROBE=1\n</code></pre></p>"},{"location":"Raspberry%20Pi/dhcp_server/","title":"How to configure Raspberrry Pi as a DHCP server","text":"<p>This should be helpful:</p> <p>https://help.ubuntu.com/community/isc-dhcp-server</p> <p>Plus this: </p> <p>https://www.raspberrypi.com/tutorials/cluster-raspberry-pi-tutorial/</p> <p>Perhaps also this: </p> <p>https://www.server-world.info/en/note?os=Debian_12&amp;p=dhcp&amp;f=1</p> <p>And this is the manual for Network Manager: </p> <p>https://wiki.archlinux.org/title/NetworkManager#</p>"},{"location":"Raspberry%20Pi/nfs_server/","title":"How to set-up an NFS server on raspberry pi","text":""},{"location":"Raspberry%20Pi/nfs_server/#how-to-mount-an-external-drive","title":"How to mount an external drive","text":"<p>First we need to make a directory to mount the drive </p> <pre><code>sudo mkdir -p /opt/nfs\n</code></pre> <p>Then we need the drive to automatically mount when the pi boots. We can either link the drive via it's path like /dev/sda1 for example or we can use the partition ID of the drive. To get the partition ID we use the following command: </p> <pre><code>sudo lsblk\nsudo blkid /dev/sda1\n</code></pre> <p>No we edit the /etc/fstab file adding a line to mount this drive. </p> <pre><code>sudo nano /etc/fstab\n</code></pre> <p>Adding the lines for example: </p> <pre><code>/dev/sda1 /opt/nfs defaults,user 0 1 \n\nOR\n\nPARTUUID=&lt;enter the partition id here&gt; /opt/nfs ext4 defaults,noatime,nodiratime 0 2 \n</code></pre> <p>save and quit. Then we can reboot to mount the drive automatically or we can mount the drive manually this time to save some time. </p> <pre><code>sudo mount /opt/nfs\nls /opt/nfs\n</code></pre>"},{"location":"Raspberry%20Pi/nfs_server/#install-the-nfs-server","title":"Install the NFS Server","text":"<p>We can install the NFS server with the command: </p> <pre><code>sudo apt install -y nfs-kernel-server \n</code></pre> <p>Next we edit the /etc/exports file to export (share) the folder on the network. </p> <pre><code>/opt/nfs *(rw,sync,no_subtree_check)\nOR\n/opt/nfs 192.168.50.0/24(rw,sync)\n</code></pre> <p>In the first example the * represents all IP addresses, i.e. everyone, in the second example, we are exporting it to 192.168.50.0/24 which is shorthand for \"all the IP addresses between 192.168.50.0 and 192.168.50.254\".</p>"},{"location":"Raspberry%20Pi/pxe_boot/","title":"How to set-up PXE booting from shared network drive","text":""},{"location":"Raspberry%20Pi/pxe_boot/#nfs-server","title":"NFS Server","text":"<p>https://www.raspberrypi.com/documentation/computers/remote-access.html#network-file-system-nfs</p>"},{"location":"Raspberry%20Pi/pxe_boot/#network-boot-the-raspberry-pi","title":"Network boot the Raspberry Pi","text":"<p>https://www.raspberrypi.com/documentation/computers/remote-access.html#network-boot-your-raspberry-pi</p>"},{"location":"React/react_setup/","title":"How to get React set-up","text":""},{"location":"React/react_setup/#first-install-nodejs","title":"First install Node.js","text":"<p>Go to the Node.js website and follow instructions to install the latest version. </p> <p>Download Node.js</p>"},{"location":"React/react_setup/#next","title":"Next","text":""}]}